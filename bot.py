import os
import requests
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import traceback  # –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–∞—Ö

# --- –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–π ---
load_dotenv()

def get_env_var(name: str) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
    value = os.getenv(name)
    if not value:
        raise ValueError(f"‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ .env!")
    return value

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–π
try:
    TELEGRAM_TOKEN = get_env_var("TELEGRAM_BOT_TOKEN")
    DEEPSEEK_KEY = get_env_var("DEEPSEEK_API_KEY")
except ValueError as e:
    print(str(e))
    exit(1)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API ---
API_URL = "https://api.deepseek.com/v1/chat/completions"
HEADERS = {
    "Authorization": f"Bearer {DEEPSEEK_KEY}",
    "Content-Type": "application/json"
}

# --- –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
CATEGORY_KEYBOARD = ReplyKeyboardMarkup(
    [["–û–¥–µ–∂–¥–∞", "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞"], ["–ö–æ—Å–º–µ—Ç–∏–∫–∞", "–î—Ä—É–≥–æ–µ"]],
    resize_keyboard=True
)

# –®–∞–±–ª–æ–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏–π
PROMPT_TEMPLATE = """
–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø—Ä–æ–¥–∞—é—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞: {product_name}.
–§–æ—Ä–º–∞—Ç:
1. –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
2. 3 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
3. –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
–ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∂–∏ –∏ –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏.
"""

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üõçÔ∏è –ë–æ—Ç-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ–ø–∏—Å–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=CATEGORY_KEYBOARD
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_input = update.message.text
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
        prompt = PROMPT_TEMPLATE.format(product_name=user_input)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        payload = {
            "model": "deepseek-chat",
            "messages": [{"role": "user", "content": prompt}],
            "temperature": 0.7,
            "max_tokens": 500,
            "top_p": 0.9
        }
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        response = requests.post(
            API_URL,
            headers=HEADERS,
            json=payload,
            timeout=15
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP —Å—Ç–∞—Ç—É—Å–∞
        response.raise_for_status()
        data = response.json()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API
        if "error" in data:
            error_msg = data["error"].get("message", "Unknown API error")
            raise Exception(f"API Error: {error_msg}")
            
        if not data.get("choices"):
            raise ValueError("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        description = data["choices"][0]["message"]["content"]
        formatted_desc = f"üìù –û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è *{user_input}*:\n\n{description}"
        
        await update.message.reply_text(formatted_desc, parse_mode="Markdown")
        
    except Exception as e:
        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        error_trace = traceback.format_exc()
        print(f"üö® –û—à–∏–±–∫–∞:\n{error_trace}")
        
        # –ü–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(
            "üòû –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ.\n"
            "–ü–æ–ø—Ä–æ–±—É–π –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ."
        )

if __name__ == "__main__":
    try:
        app = Application.builder().token(TELEGRAM_TOKEN).build()
        app.add_handler(CommandHandler("start", start))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        app.run_polling()
    except Exception as e:
        print(f"‚õî –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        exit(1)
