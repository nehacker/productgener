import os  
from dotenv import load_dotenv  
from telegram import Update, ReplyKeyboardMarkup  
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes  

# --- –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–π ---  
load_dotenv()  

def get_env_var(name: str) -> str:  
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""  
    value = os.getenv(name)  
    if not value:  
        raise ValueError(f"‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è {name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ .env!")  
    return value  

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–π  
try:  
    TELEGRAM_TOKEN = get_env_var("TELEGRAM_BOT_TOKEN")  
    DEEPSEEK_KEY = get_env_var("DEEPSEEK_API_KEY")  
except ValueError as e:  
    print(str(e))  
    exit(1)  

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API ---  
API_URL = "https://api.deepseek.com/v1/chat/completions"  
HEADERS = {  
    "Authorization": f"Bearer {DEEPSEEK_KEY}",  
    "Content-Type": "application/json"  
}  

# --- –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---  
CATEGORY_KEYBOARD = ReplyKeyboardMarkup(  
    [["–û–¥–µ–∂–¥–∞", "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞"], ["–ö–æ—Å–º–µ—Ç–∏–∫–∞", "–î—Ä—É–≥–æ–µ"]],  
    resize_keyboard=True  
)  

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---  
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):  
    await update.message.reply_text(  
        "üîí –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –±–æ—Ç-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ–ø–∏—Å–∞–Ω–∏–π",  
        reply_markup=CATEGORY_KEYBOARD  
    )  

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):  
    try:  
        prompt = f"–ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {update.message.text}"  
        
        # –ó–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –∑–∞—â–∏—â–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ  
        response = requests.post(  
            API_URL,  
            headers=HEADERS,  
            json={  
                "model": "deepseek-chat",  
                "messages": [{"role": "user", "content": prompt}],  
                "temperature": 0.7  
            },  
            timeout=10  
        )  
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞  
        response.raise_for_status()  
        data = response.json()  
        
        if not data.get("choices"):  
            raise ValueError("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")  
            
        await update.message.reply_text(data["choices"][0]["message"]["content"])  
        
    except Exception as e:  
        print(f"üö® –û—à–∏–±–∫–∞: {str(e)}")  
        await update.message.reply_text("üîê –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")  

# --- –ó–∞–ø—É—Å–∫ ---  
if __name__ == "__main__":  
    try:  
        app = Application.builder().token(TELEGRAM_TOKEN).build()  
        app.add_handler(CommandHandler("start", start))  
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))  
        app.run_polling()  
    except Exception as e:  
        print(f"‚õî –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")  